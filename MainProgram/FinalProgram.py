import os
import openai
from PIL import Image
import streamlit as st
from openai.error import InvalidRequestError

import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from konlpy.tag import Okt
import re

#keyword
import numpy as np
import itertools
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer


regex = r"[^a-zA-Z0-9 ]"

def StopWord(sentence):
    subst = ""
    sentence = re.sub(regex, subst, sentence)
    print(sentence)

    stop_words = set(stopwords.words('english'))

    word_tokens = word_tokenize(sentence)

    result = []
    for word in word_tokens:
        if word not in stop_words:
            result.append(word)

    print('Î∂àÏö©Ïñ¥ Ï†úÍ±∞ Ï†Ñ:',word_tokens)
    print('Î∂àÏö©Ïñ¥ Ï†úÍ±∞ ÌõÑ:',result)

    print(result[0])

    st = ",".join(result)
    print(st)
    return st

def KeyWordFun(doc):
    n_gram_range = (3, 3)
    stop_words = "english"

    count = CountVectorizer(ngram_range=n_gram_range, stop_words=stop_words).fit([doc])
    candidates = count.get_feature_names_out()

    #print('trigram Í∞úÏàò :',len(candidates))
    #print('trigram Îã§ÏÑØÍ∞úÎßå Ï∂úÎ†• :',candidates[:5])

    model = SentenceTransformer('distilbert-base-nli-mean-tokens')
    doc_embedding = model.encode([doc])
    candidate_embeddings = model.encode(candidates)

    top_n = 3
    distances = cosine_similarity(doc_embedding, candidate_embeddings)
    keywords = [candidates[index] for index in distances.argsort()[0][-top_n:]]

    ss = ",".join(keywords)
    print(ss)
    print(keywords)
    return ss

openai.api_key = 'insert key'
messages = []
#tt= []
#chatGPT

def openai_completion(prompt):
    response = openai.Completion.create(
      #model="gpt-3.5-turbo",
      model="text-davinci-003",
      prompt=prompt,
      max_tokens=150,
      temperature=0.5
    )
    return response['choices'][0]['text']

#DALLE
def openai_image(prompt):
    response = openai.Image.create(
      prompt=prompt,
      n=2,
      size="1024x1024"
    )
    image_url = response['data'][0]['url']
    return image_url


try:
    

    format_type = st.sidebar.selectbox('Choose Option',["Basic","First Sentence & StopWord","KeyWord","First Sentence","Summary"])

    #Basic : Ï†ïÏ†ú ÏïàÌï®
    if format_type == "Basic":
        st.title("Basic")
        input_text = st.text_area("Please enter text here... üôã",height=50)
        
        input_button = st.button("Go answer")
        openai_answer = openai_completion(input_text)
        
        tt = openai_answer

        if input_button:
            #st.write(openai_answer)
            st.write(tt)
        

       
        print('ONE!!',openai_answer)
        print('tt',tt)

        if st.button("Generate Image üöÄ"):
            print('imga tt',tt)            
            image_url = openai_image(tt)
            print(image_url)
            st.image(image_url, caption='Generated by DALLE')
        else:
            st.warning("Please enter something! ‚ö†")        
    
    # First Sentence & StopWord : Ï≤´Î¨∏Ïû• ÏÑ†ÌÉù + Î∂àÏö©Ïñ¥ Ï†úÍ±∞ (Îã®Ïñ¥Îßå)
    elif format_type == "First Sentence & StopWord":
        st.title("First Sentence & StopWord")
        input_text = st.text_area("Please enter text here... üôã",height=50)
        
        input_button = st.button("Go answer")
        openai_answer = openai_completion(input_text)
        
        tt = openai_answer

        if input_button:
            #st.write(openai_answer)
            st.write(tt)
        

     
        print('ONE!!',openai_answer)
        print('tt',tt)
        

        if st.button("Generate Image üöÄ"):
            #image_url = openai_image(openai_answer)
            print('imga tt',tt)
            
            # Ï≤´ Î¨∏Ïû•Îßå Í∞ÄÏ†∏Ïò§Í∏∞
            ll = tt.split('.')  
            # Ï§ëÍ∞ÑÏóê ttÎ•º ÌÖçÏä§Ìä∏ ÎßàÏù¥Îãù => Ìï®Ïàò ÎÑ£Í∏∞
            print('fisrt text',ll[0])
            tt = StopWord(ll[0])
            print('StopWord tt',tt)

            
            image_url = openai_image(tt)
            print(image_url)
            st.image(image_url, caption='Generated by DALLE')
        else:
            st.warning("Please enter something! ‚ö†")        
        
    
    #KeyWord : ÌïµÏã¨ÌÇ§ÏõåÎìú Ï∂îÏ∂ú (, Î°ú Ïó∞Í≤∞)
    elif format_type == "KeyWord" :
        st.title("KeyWord")
        input_text = st.text_area("Please enter text here... üôã",height=50)
        input_button = st.button("Go answer")
        openai_answer = openai_completion(input_text)
        
        tt = openai_answer

        if input_button:
            #st.write(openai_answer)
            st.write(tt)
        

     
        print('ONE!!',openai_answer)
        print('tt',tt)
        

        if st.button("Generate Image üöÄ"):
            #image_url = openai_image(openai_answer)
            print('imga tt',tt)
            
            tt = KeyWordFun(tt)
            print('Keyword',tt)
            image_url = openai_image(tt)
            print(image_url)
            st.image(image_url, caption='Generated by DALLE')
        else:
            st.warning("Please enter something! ‚ö†")
    
    #First Sentence : Ï≤´Î¨∏Ïû•Îßå ÏÑ†ÌÉù
    elif format_type == "First Sentence":
        st.title("First Sentence")
        input_text = st.text_area("Please enter text here... üôã",height=50)
        
        input_button = st.button("Go answer")
        openai_answer = openai_completion(input_text)
        
        tt = openai_answer

        if input_button:
            #st.write(openai_answer)
            st.write(tt) 
        print('ONE!!',openai_answer)
        print('tt',tt)
        if st.button("Generate Image üöÄ"):
            #image_url = openai_image(openai_answer)
            print('imga tt',tt)
            
            # Ï≤´ Î¨∏Ïû•Îßå Í∞ÄÏ†∏Ïò§Í∏∞
            ll = tt.split('.')  
            # Ï§ëÍ∞ÑÏóê ttÎ•º ÌÖçÏä§Ìä∏ ÎßàÏù¥Îãù => Ìï®Ïàò ÎÑ£Í∏∞
            print('fisrt text',ll[0])
            tt = ll[0]

            
            image_url = openai_image(tt)
            print(image_url)
            st.image(image_url, caption='Generated by DALLE')
        else:
            st.warning("Please enter something! ‚ö†")
        


    # Summary : ÏûêÏó∞Ïñ¥ Í≤∞Í≥º ÏöîÏïΩ => chatGPT Ïóê Î¨ºÏñ¥Î≥¥Í∏∞?
    else :
        inputex = ''


except InvalidRequestError as e:
    print('error!!!')
    st.markdown("It looks like this request may not follow DALL-E content policy.  \nAsk me the question again")